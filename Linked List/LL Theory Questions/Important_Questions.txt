Question 1:- Why merge sort is prefered over quick sort on linked list ?
Answer 1:- 

In case of linked lists the case is different mainly due to difference in memory allocation of arrays and linked lists. Unlike arrays, linked list nodes may not be adjacent in memory.
Unlike array, in linked list, we can insert items in the middle in O(1) extra space and O(1) time if we are given reference/pointer to the previous node. Therefore merge operation of merge sort can be implemented without extra space for linked lists.




Question 2:- Why quick sort is prefered over merge sort on arrays ?
Answer 2:- 

1. Quick Sort in its general form is an in-place sort, whereas merge sort requires O(N) extra storage, N denoting the array size which may be quite expensive. Allocating and de-allocating the extra space used for merge sort increases the running time of the algorithm.

2. Comparing average complexity we find that both type of sorts have O(NlogN) average complexity but the constants differ. For arrays, merge sort loses due to the use of extra O(N) storage space.

3.The worst case of quicksort O(n^2) can be avoided by using randomized quicksort.

4. Quick Sort is also a cache friendly sorting algorithm as it has good locality of reference when used for arrays.
5. Quick Sort is also tail recursive, therefore tail call optimizations is done.
   



Question 3:- Why quick sort is better than mergesort ?
Answer 3:-  Reasons are as folows:-

1.AUXILARY SPACE:- Quick sort is an in-place sorting algorithm. In-place sorting means no additional storage space is needed to perform sorting. Merge sort requires a temporary array to merge the sorted arrays and hence it is not in-place giving Quick sort the advantage of space.

2.WORST CASE TC:- The worst case of quicksort O(n^2) can be avoided by using randomized quicksort.

3.LOCALITY OF REFERENCE:- Quicksort in particular exhibits good cache locality and this makes it faster than merge sort in many cases like in virtual memory environment.

'Locality of reference' refers memory accessed frequently(temporal locality) or contiguous memory locations(spatial locality) as in array. Basically, it means that the machine(more specifically, cache memory) finds it easier, and therefore faster, to access these memory locations.

Consider the merge sort algorithm.
It first(virtually) divides the array into half up to the smallest unit i.e. singular elements(split function). It then compares arrays two-at-a-time and merges them in a sorted manner(merge function). Consider a sample merge b/w two arrays of length n, say, arr[0]...arr[n-1] and arr[n]...arr[2n-1]. The processor has to fetch first elements of both arrays, i.e. arr[0] and arr[n]. Since they are not localized, it will be less efficient.

Compare this with the Quick Sort algorithm.
Every comparison in the partition function takes place among adjacent i.e. localized memory locations, thus it will be cache efficient.





Question:- Can we reverse a linked list in less than O(n) ?
Answer:- It is not possible to reverse a singly linked list in less than O(n). A singly linked list can only be reversed in O(n) time using recursive and iterative methods. 

In case of Doubly Linked List, we can use 2 pointer approach to reverse the DLL in O(n/2) time.
But in that case we also need the tail pointer and to find tail pointer we need to traverse the whole Linked List which take O(n) time.

CONCLUSION:- IT'S NOT POSSIBLE TO REVERSE THE LINKED LIST IN LESS THAN O(N) TIME.
